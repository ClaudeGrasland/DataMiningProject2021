[["index.html", "Projet DATA MINING 2021 Master Meci - Parcours Data - Options PISE et CCESE", " Projet DATA MINING 2021 Master Meci - Parcours Data - Options PISE et CCESE Claude Grasland et Camille Signoretto 2021-03-09 "],["00-presentation.html", "Présentation À propos de ce document Prérequis Remerciements Licence", " Présentation À propos de ce document Ce document est la première version du cours de Data Mining dispensé aux étudiants de deuxième année de l option Data du master MECI Il est basé sur R version 4.0.2 (2020-06-22). Ce document est régulièrement corrigé et mis à jour. La version de référence est disponible en ligne à ladresse : https://ClaudeGrasland.github.io/DataMiningProject2021. Pour toute suggestion ou correction, il est possible de me contacter par mail Prérequis Le seul prérequis pour suivre ce document est davoir installé R et RStudio sur votre ordinateur. Il sagit de deux logiciels libres, gratuits, téléchargeables en ligne et fonctionnant sous PC, Mac et Linux. Pour installer R, il suffit de se rendre sur une des pages suivantes 1 : Installer R sous Windows Installer R sous Mac Pour installer RStudio, rendez-vous sur la page suivante et téléchargez la version adaptée à votre système : https://www.rstudio.com/products/rstudio/download/#download Remerciements Ce document a bénéficié de la relecture et des suggestions  des étudiants qui en ont été les cobayes des premières versions. Ce document est généré par lexcellente extension bookdown de Yihui Xie et il sest servi du template proposé par Julien Barnier pour introduire des exercices interactifs dans son cours de tidyverse. Licence Ce document est mis à disposition selon les termes de la Licence Creative Commons Attribution - Pas dUtilisation Commerciale - Partage dans les Mêmes Conditions 4.0 International. Licence Creative Commons Sous Linux, utilisez votre gestionnaire de packages habituel. "],["11-data.html", "Chapitre 1 Collecte de données statistiques et spatiales 1.1 Introduction 1.2 Données statistiques 1.3 Données géométriques 1.4 Test de jointure 1.5 Bilan et nettoyage 1.6 Exercices", " Chapitre 1 Collecte de données statistiques et spatiales library(knitr) library(dplyr) library(data.table) library(readr) library(sf) library(ggplot2) 1.1 Introduction Lobjectif du projet Data Mining 2021 consistera à étudier les inégalités sociales et spatiales dans le département du Val de Marne à partir des données du dernier recensement de population de 2017. Ces inégalités seront envisagées à différentes échelles ce qui impliquera des procédures dagrégation des fichiers détails. 1.2 Données statistiques Nous partirons des fichiers détail de lINSEE car, à la différence des tableaux prédéfinis, ils permettent virtuellement toutes les formes de croisement dindicateurs. Ils sont évidemment beaucoup plus volumineux, mais ce sera justement loccasion pour les étudiants en data mining dêtre confrontés à des problèmes doptimisation et de big data. On trouve leur description détaillée sur le site de lINSEE dans la page consacrée au recensement : https://www.insee.fr/fr/statistiques/4508161 Nous avons opté pour le fichier des individus localisés au canton-ou-ville qui présente une grande polyvalence dusage puisquil permet de reconstituer des tableau agrégés ou lunité de compte peut-être soit le ménage, soit lindividu selon le critère de pondération adopté. 1.2.1 Etape 1 : téléchargement des données et stockage tempioraire Nous allons télécharger ici le fichier des données pour la région Ile-de-France au format .csv et lenregistrer dans un dossier spécial tmp qui pourra ulétérieurement être détruit ou déplacé afin de libérer de la place N.B. Ce programme qui prend quelques minutes sera exécuté une seule fois. On ajoutera ensuite dans len-tête du chunk eval=FALSE ce qui veut dire que ce bloc de code ne sera plus executé automatiquement lorsquon réalise un knit du document Rmd. Il sera néanmoins toujours possible de lexecuter manuellement en cliquant sur sa petite flèche verte. ### Téléchargement du fichier INSEE download.file(url=&quot;https://www.insee.fr/fr/statistiques/fichier/4802064/RP2017_INDCVIZA_csv.zip&quot;, destfile = &quot;tmp/indiv2017.zip&quot;) ## Decompression du fichier INSEE unzip(zipfile = &quot;tmp/indiv2017.zip&quot;, exdir = &quot;tmp&quot;) ## Examen du contenu list.files(&quot;tmp&quot;) Nous constatons que le document zippé contenait en fait deux fichiers différents Le fichier de données individuelles FD_INDCVIZA_2017.csv : qui pèse au bas mot 1014.3 Mo (1 Giga) et dont nous verrons par la suite quil comporte 4.3 millions de lignes et 88 colonnes. Le fichier de métadonnées varmod_INDCVI_2017.csv : qui ne pèse que 1.8 Mo et comprend la description précise du label de chacune des modalités de variables. 1.2.2 Etape 2 : Transformation des données au format R Limportation dun tableau aussi gros (4.3 millions de lignes et 88 colonnes) donne loccasion de faire quelques tests de vitesses sur les différents packages capables de lire des fichiers .csv. Nous allons pour cela utiliser la fonction Sys.time()qui permet de repérer lheure au début et à la fin dune action. Les résultats dépendront évidemment de la vitesse de lordinateur. Il sagit ici dun MacBook Pro 2.9 Ghz, disposant de 4 coeurs et 16 Go de mémoire. 1.2.2.1 Chargement avec la fonction read.csv Avec la fonctionread.csv ui fait partie du R-base , le temps de chargement est de 150 secondes. Le tableau résultant est de classe data.frame puisque nous avons utilisé une fonction native de R-base t1&lt;-Sys.time() tab&lt;-read.csv(&quot;tmp/FD_INDCVIZA_2017.csv&quot;, sep = &quot;;&quot;, header =T) t2&lt;-Sys.time() paste (&quot;chargement effectué en&quot;,t2-t1,) dim(tab) class(tab) 1.2.2.2 Chargement avec la fonction read_csv2 avec la fonction read_csv2 du package readr, le chargement est effectué en 59 secondes sur le même ordinateur. Le tableau résultant garde la classe data.frame mais est aussi un tibble puisque le package readr fait partie de lécosystème tibble/tidyverse. Le temps de chrgement est donc divisé par deux. library(readr) t1&lt;-Sys.time() tab&lt;-read_csv2(&quot;tmp/FD_INDCVIZA_2017.csv&quot;) t2&lt;-Sys.time() paste (&quot;chargement effectué en&quot;,t2-t1, &quot;secondes&quot;) dim(tab) class(tab) 1.2.2.3 Chargement avec la fonction fread avec la fonction fread du package data.table, le chargement est effectué en 31 secondes sur le même ordinateur.Le tableau résultant conserve la classe data.frame mais possède aussi la classe data.table puisque la fonction fread est issue de ce package. Le temps est divisé encore une fois par deux. library(data.table) t1&lt;-Sys.time() tab&lt;-fread(&quot;tmp/FD_INDCVIZA_2017.csv&quot;) t2&lt;-Sys.time() paste (&quot;chargement effectué en&quot;,t2-t1, &quot;secondes&quot;) dim(tab) class(tab) On voit donc que le temps de chargement peut différer fortement selon le choix des packages. Il en va ensuite de même pour les traitements dagrégation des données qui seront plus ou moins rapides selon que lon utilise les fonctions de R-base applicables à un data.frame, celles du package tidyverse applicables à un tibble ou enfin celles du package data.table applicables à un data.table. 1.2.3 Etape 3 : Sélection des données utiles et sauvegarde au format .Rdata Nos différentes tableaux peuvent être enregistés au format interne de .R ce qui réduira considérablement leur taille par rapport au fichier texte au format csv qui pèse 1.06 Go. Nous allons également limiter la taille du document en ne conservant que les données qui nous intéressent, en loccurence celles du département du Val de Marne. Comme ces données bvont nous servir durant tout le projet, elles seront stockées dans le dossier data situé à lintérieur du projet et non pas dans le dossier tmp qui sera détruit si lon nen a plus besoin pour libérer de la place. N.B. On ramène lobjet à la classe dobjet unique data.frame pour éviter des conflits possibles entre package. On pourra toujours le retransformer ensuite en data.table ou en tibble. ## Chargement avec fread (+ rapide) tab&lt;-fread(&quot;tmp/FD_INDCVIZA_2017.csv&quot;) ## Suppression de la classe data.table tab&lt;-as.data.frame(tab) ## Selection des données relatives au Val de Marne sel &lt;- tab %&gt;% filter(DEPT == 94) ## Vérification des dimensions du tableau dim(sel) ## Sauvegarde au format RDS saveRDS(object = sel, file = &quot;data/indiv2017.Rdata&quot;) On peut effectuer de façon facultative une sauvegarde au format .csv ce qui évitera des problème douverture du fichier .Rdata pour les personnes ayant des versions anciennes de R. Mais du coup cela engendrera un fichier très volumineux (200 Mo). ## Sauvegarde au format CSV (facultatif) write.table(x=sel, file = &quot;data/indiv2017.csv&quot;, sep=&quot;;&quot;, dec = &quot;.&quot;, fileEncoding = &quot;UTF-8&quot;) 1.2.3.1 Etape 4 : Chargement et sauvegarde des méta-données Il ne faut surtout pas oublier le fichier des métadonnées qui va permettre de recoder facilement tous les facteurs et de décoder les chiffres correspondant aux classes. On va donc le transformer au format R puis lenregistrer également dans le dossier data. # Lecture du fichier de métadonnées meta&lt;-fread(&quot;tmp/varmod_INDCVI_2017.csv&quot;) # Enregistrement dans le dossier data saveRDS(object = meta, file = &quot;data/indiv_2017_meta.Rdata&quot;) 1.3 Données géométriques Les contours des unités spatiales correspondant aux codes de lINSEE sont produits par lIGN et disponibles sur le site géoservice en accès libre : https://geoservices.ign.fr/documentation/diffusion/telechargement-donnees-libres.html 1.3.1 Etape 1 : récupération du fonds IRIS au format shapefile La principale difficulté est de sorienter dans lensemble des produits disponibles. Dans lexemple présent, nous cherchhons le contour des IRIS, cest-à-dire des entités infra-communales correspondant au découpage utilisé lors du recensement de 2017. Comme précédemment, nous allons stocker le résultat du téléchargement dans notre fichier tmp qui sera détruit ou déplacé lorsque nous aurons récupéré toutes les données utiles. download.file(url=&quot;https://wxs.ign.fr/1yhlj2ehpqf3q6dt6a2y7b64/telechargement/inspire/CONTOURS-IRIS-2017-06-30%24CONTOURS-IRIS_2-1__SHP__FRA_2017-06-30/file/CONTOURS-IRIS_2-1__SHP__FRA_2017-06-30.7z&quot;, destfile = &quot;tmp/geom.7z&quot;) Il nest apparemment pas possible de décompresser le fichier avec la fonction unzip de R, donc on effectue cette opération manuellement. Il en résulte une arborescence très complexe de dossiers et de sous-dossiers correspondant aux IRIS de la Francé métropolitaine mais aussi de chacun des DOM. Il faut alors aller repérer dans cet arborescence le dossier où se trouve le fonds IRIS de la France métropolitaine qui est au format shapefile et comporte plusieurs fichiers avec des extensions différentes. list.files(&quot;tmp/CONTOURS-IRIS_2-1__SHP__FRA_2017-06-30/CONTOURS-IRIS/1_DONNEES_LIVRAISON_2016/CONTOURS-IRIS_2-1_SHP_LAMB93_FE-2016&quot;) [1] &quot;CONTOURS-IRIS.cpg&quot; &quot;CONTOURS-IRIS.dbf&quot; &quot;CONTOURS-IRIS.prj&quot; [4] &quot;CONTOURS-IRIS.shp&quot; &quot;CONTOURS-IRIS.shx&quot; &quot;LISTE.csv&quot; 1.3.2 Etape 2 : Importation et transformation au format sf La cartographie et plus généralement les opérations géométriques sur des données spatiales dans R peuvent facilement être effectuées avec le package sf (spatial features) qui crée des objets ubniques rassemblant à la fois un tableau de données (léquivalent du fichier .dbf) une géométrie (léquivalent du fichier .shp) une projection (léquivalent du fichier .prj) Lorsquon récupère des fonds de carte au format shapefile (.shp) ou dans dautres formats standards comme GeoJson, la première tâche consiste donc à les convertir au formt sf afin de pouvoir les utiliser facilement dans R. Limportation se fait à laide de linstruction st_read en indiquant juste le nom du fichier .shp à charger. Les autres fichiers (.dbf ou .proj) seront lus également et intégrés dans lobjet qui hérite de la double classe data.frame et sf library(sf) map &lt;- st_read(&quot;tmp/CONTOURS-IRIS_2-1__SHP__FRA_2017-06-30/CONTOURS-IRIS/1_DONNEES_LIVRAISON_2016/CONTOURS-IRIS_2-1_SHP_LAMB93_FE-2016/CONTOURS-IRIS.shp&quot;) Reading layer `CONTOURS-IRIS&#39; from data source `C:\\Users\\claude\\cg\\cours\\DataMining\\DataMiningProject2021\\tmp\\CONTOURS-IRIS_2-1__SHP__FRA_2017-06-30\\CONTOURS-IRIS\\1_DONNEES_LIVRAISON_2016\\CONTOURS-IRIS_2-1_SHP_LAMB93_FE-2016\\CONTOURS-IRIS.shp&#39; using driver `ESRI Shapefile&#39; Simple feature collection with 49404 features and 6 fields geometry type: MULTIPOLYGON dimension: XY bbox: xmin: 99040 ymin: 6049662 xmax: 1242445 ymax: 7110479 projected CRS: RGF93_Lambert_93 dim(map) [1] 49404 7 class(map) [1] &quot;sf&quot; &quot;data.frame&quot; head(map,2) # A tibble: 2 x 7 INSEE_COM NOM_COM IRIS CODE_IRIS NOM_IRIS TYP_IRIS geometry &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;MULTIPOLYGON [m]&gt; 1 72191 Mayet 0000 721910000 Mayet Z (((498083.5 6747517, 4981~ 2 77248 Lesches 0000 772480000 Lesches Z (((685753.1 6868613, 6857~ 1.3.3 Etape 3 : Extraction des IRIS de la zone détude Le fichier comporte près de 50 000 unités spatiales qui correspondent soit à des communes suffisamment grandes pour être découpées en IRIS, soit à des communes non découpées. On reconnaît ces dernières au fait que leur code IRIS se termine par 00000. Supposons quon veuille extraire le fonds de carte du Val de Marne. On va commencer par créer une variable DEPT en extrayant les dxeux premiers caractères du code communal, puis on va sélectionner le départements correspondant : sel&lt;-map %&gt;% mutate(DEPT = substr(INSEE_COM,1,2)) %&gt;% filter(DEPT %in% c(&quot;94&quot;)) dim(sel) [1] 527 8 class(sel) [1] &quot;sf&quot; &quot;data.frame&quot; head(sel,2) # A tibble: 2 x 8 INSEE_COM NOM_COM IRIS CODE_IRIS NOM_IRIS TYP_IRIS geometry &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;MULTIPOLYGON [m]&gt; 1 94021 Chevil~ 0107 940210107 Sorbiers H (((652774.3 6853051, 652~ 2 94068 Saint-~ 0204 940680204 Le Vieu~ H (((662096.5 6856264, 662~ # ... with 1 more variable: DEPT &lt;chr&gt; Le nouveau tableau ne comporte plus que 2749 unités spatiales et 8 colonnes au lieu de 7 puisqu lon a ajouté une colonne DEPT. On peut visualiser le résultat à laide de la fonction geom_sfdu package ggplot2 : ggplot(sel)+geom_sf(fill=&quot;lightyellow&quot;,col=&quot;red&quot;) + theme_void() On peut aussi tracer la carte en utilisant la fonction plotdu package sf appliquée à la variable geometry qui contient le contour des polygones. par(mar=c(0,0,0,0)) plot(sel$geometry, col = &quot;lightyellow&quot;, border = &quot;red&quot;) On sauvegarde le résultat dans notre dossier data au format interne de R : saveRDS(object = sel, file = &quot;data/map_iris.Rdata&quot;) On peut également effectuer de façon facultative une sauvegarde au format shapefile afin de pouvoir réutiliser le fonds de carte à laide dautres applications externes à R. st_write(obj = sel, dsn= &quot;data/map_iris.shp&quot;, # indique le format de sortie par l&#39;extension .shp delete_dsn = TRUE, # écrase le fichier s&#39;il existe déjà quiet = TRUE) # évite que R fasse des commentaires 1.4 Test de jointure Afin de valider la compatibilité des deux fichiers que nous avons créés, nous allons procéder à un test de jointure cest-à-dire de collage des données statistiques sur le fonds de carte pour voir si les codes assurent bien la liaison. 1.4.1 Etape 1 : Création dun tableau de la population par IRIS On charge le fichier des individus, puis on effectue la somme des poids des individus (IPONDI) en fonction de leur zone géographique (IRIS) que lon renomme CODE_IRIS: indiv&lt;-readRDS(&quot;data/indiv2017.Rdata&quot;) don &lt;- indiv %&gt;% rename(CODE_IRIS = IRIS)%&gt;% group_by(CODE_IRIS) %&gt;% summarize(POP = sum(IPONDI)) `summarise()` ungrouping output (override with `.groups` argument) head(don,3) # A tibble: 3 x 2 CODE_IRIS POP &lt;chr&gt; &lt;dbl&gt; 1 940020101 3092. 2 940020102 3895. 3 940020103 2661. tail(don,3) # A tibble: 3 x 2 CODE_IRIS POP &lt;chr&gt; &lt;dbl&gt; 1 940810311 3549. 2 940810312 6101. 3 ZZZZZZZZZ 21679. Tout se passe bien, mais on remarque à la fin du fichier une ligne portant le code CODE_IRIS ZZZZZZZZZZ et représentant environ 22000 habitants. La documentation de lINSEE indique quil sagit de communes non découpées en IRIS pour lequelles la localisation nest pas fournie afin de préserver le secret statistique. Ces communes non découpées en IRIS ne pourront donc pas être représentées sur la carte. 1.4.2 Etape 2 : Chargement du fonds de carte des IRIS du Val de Marne On charge ensuite le fonds de carte des IRIS que nous avons créé précédemment et on compare son nombre dunités à celui du fichier de données library(sf) map &lt;- readRDS(file =&quot;data/map_iris.Rdata&quot;) dim(map) [1] 527 8 dim(don) [1] 520 2 On constate quil y a 527 unités spatiales dans le fichier des données contre seulement 520 dans le fichier statistiques. Donc la correspondance nest pas parfaite. 1.4.3 Etape 3 : Compatibilité des deux fichiers ? On va procéder dans un premier temps à un test de compatibilité des deux fichiers pour voir quelles unités manquent dans lun ou lautre. ## Unités présentes dans le fichier map mais pas dans don test1 &lt;- map %&gt;% filter(!map$CODE_IRIS %in% don$CODE_IRIS) test1 # A tibble: 9 x 8 INSEE_COM NOM_COM IRIS CODE_IRIS NOM_IRIS TYP_IRIS geometry &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;MULTIPOLYGON [m]&gt; 1 94065 Rungis 0104 940650104 Silic A (((652486 6848926, 65242~ 2 94048 Maroll~ 0101 940480101 Bois de~ A (((666452.1 6849978, 666~ 3 94021 Chevil~ 0101 940210101 Marche ~ A (((653281.2 6851321, 653~ 4 94056 Périgny 0000 940560000 Périgny Z (((668479.3 6843625, 668~ 5 94053 Noiseau 0000 940530000 Noiseau Z (((667480.7 6851728, 667~ 6 94047 Mandre~ 0000 940470000 Mandres~ Z (((665505.4 6844490, 665~ 7 94065 Rungis 0103 940650103 Min A (((652208.9 6850542, 652~ 8 94070 Santeny 0000 940700000 Santeny Z (((667492.4 6848458, 667~ 9 94001 Ablon-~ 0000 940010000 Ablon-s~ Z (((658439.7 6847278, 658~ # ... with 1 more variable: DEPT &lt;chr&gt; ## Unités présentes dans le fichier don mais pas dans map test2 &lt;- don %&gt;% filter(!don$CODE_IRIS %in% map$CODE_IRIS) test2 # A tibble: 2 x 2 CODE_IRIS POP &lt;chr&gt; &lt;dbl&gt; 1 94065XXXX 34.8 2 ZZZZZZZZZ 21679. On trouve plusieurs cas de non compatibilité mais tous sont en fait logiques : Les communes non découpées en IRIS (Perigny, Noiseau, Mandres, Santeny, Ablon) sont regroupées dans la catégorie ZZZZZZZZZZ du fichier de données Les iris de moins de 200 hab. des communes découpées en IRIS sont anonymisés mais gardent leur code communal. On en déduit que lIris de Rungis 940650104 qui est le seul absent du fichier de données correspond au code 94065XXXX qui na effectivement que 35 habitants. Les iris nayant aucun habitant comme le MIN de Rungis ou le Bois Notre Dame sont par définition absents du fichier. 1.4.4 Etape 4 Visualisation des zones couvertes et non couvertes On peut donc conclure que la correspondance est correcte et procéder à la jointure puis visualiser quelles sont les unités spatiales exclues de la jointure. mapdon&lt;-right_join(map,don, by = &quot;CODE_IRIS&quot;) par(mar=c(0,0,0,0)) plot(map$geometry,col=&quot;gray&quot;, border=&quot;gray&quot;) plot(mapdon$geometry,col=&quot;lightyellow&quot;,border=&quot;red&quot;, add=TRUE) 1.5 Bilan et nettoyage Nous avons désormais un dossier data qui comporte uniquement les trois fichiers indispensables pour les analyses statistiques et cartographiques qui seront menées dans les chapitres suivants. list.files(&quot;data&quot;) [1] &quot;indiv_2017_meta.Rdata&quot; &quot;indiv2017.Rdata&quot; &quot;map_iris.dbf&quot; [4] &quot;map_iris.prj&quot; &quot;map_iris.Rdata&quot; &quot;map_iris.shp&quot; [7] &quot;map_iris.shx&quot; On peut alors décider de détruire le dossier tmp qui contient des dossiers très volumineux et pas forcément indispensables. 1.6 Exercices "],["21-socio-spatial.html", "Chapitre 2 Agrégation socio-spatiale 2.1 Objectifs 2.2 Fichier de référence", " Chapitre 2 Agrégation socio-spatiale 2.1 Objectifs Lobjectif de cette section est de procéder à des agrégations sociales et spatiales des données individuelles afin de pouvoir ensuite réaliser des cartes. 2.1.1 Ménages ou habitants ? La principale difficulté consistera à choisir les bonnes pondérations selon que lon souhaite : Travailler sur les ménages : par exemple pour connaître le nombre de ménages ayant 0, 1, 2 ou plus de 3 automobiles. Travailler sur les habitants : par exemple pour connaître le nombre de personnes ayant plus de 6 ans. 2.1.2 Département, commune ou IRIS ? On devra aussi sintéresser aux variables géographiques disponibles pour réaliser des agrégations spatiales différentes selon que lon souhaite travailler : à léchelle de lensemble du département : par exemple, quel est le taux de chômage des actifs du Val de Marne à léchelle des communes : par exemple, quel est le taux de chômage des actifs de Sucy-en-Brie à léchelle des IRIS infra-communaux : par exemple, quel est le taux de chômage des actifs du quartier de la Fossse Rouge à Sucy-en Brie. 2.1.3 Tableaux de contingence et tableaux de profil Enfin, on fera attention de ne pas mélanger les stocks et les taux qui correspondent à des tableaux et des variables de nature différente tant pour lanalyse statistique que pour la cartogaphie. Un tableau de contingence est un tableau de comptage dindividus (habitants ou ménages) dans lequel on peut effectuer les sommes en ligne ou en colonnes. Par exemple, on peut dénombrer les actifs en fonction de leur catégorie socio-professionnelle et de leur commune de résidence. Chacune des cases du tableau correspondra à un nombre dactifs. Un tableau de profil (ou de pourcentage) est une transformation du tableau de contingence permettant de calculer des pourcentages en ligne ou en colonne. Dans lexemple précédent, si les lignes correspondent aux communes et les colonnes aux CSP, on peut produire soit un tableau des profils en lignes (pourcentage des habitants dune commune travaillant dans une CSP), soit un tableau des profils en colonnes (pourcentage des membres dune CSP résidant dans une commune). 2.1.4 Packages utilisés Nous allons nous limiter à un nombre minimum de package au cours de cette première séance dans la mesure où très peu de réalisations cartographiques seront effectuées. dplyr : pour la manipulation des tableaux et leur agrégation (inutile de charger lensemble du package tidyverse) knitr : pour afficher proprement les tableaux de résultats ggplot2 : pour visualiser les résultats sous formes de graphiques sf : pour manipuler les données cartographiques et les agréger library(knitr) library(dplyr) library(ggplot2) library(sf) 2.1.5 Choix dune commune En prévision du projet, chaque étudiant devra choisir une commune qui fera lobjet danalyse ciblées. Cette commune devra respecter les conditions suivantes : Présence dau moins 10 IRIS Population supérieure à 20 000 habitants Diversité sociale importante avec mélange de quartiers à profils différents Une fois identifiée la commune cible chaque étudiant devra trouver son code officiel géographique en tapant son nom sur la page web suivante : https://www.insee.fr/fr/statistiques/zones/2011101 Voici une première liste de communes proposées aux étudiants : Champigny-sur-Marne (94017) Créteil (94028) Fontenay-sous-Bois (94033) Ivry-sur-Seine (94041) Saint-Maur-des-Fossés (94068) Vitry-sur-Seine (94081) Vincennes (94080) Villejuif (94076) Le cours prendra quant à lui lexemple de la commune de Sucy-en-Brie (94071) 2.1.6 Chargement des données Nous avons besoin de trois fichiers Le fichier des individus le fichier des métadonnées relatives aux individus le fonds de carte des IRIS indiv &lt;- readRDS(&quot;data/indiv2017.Rdata&quot;) meta &lt;- readRDS(&quot;data/indiv_2017_meta.Rdata&quot;) map &lt;-readRDS(&quot;data/map_iris.Rdata&quot;) 2.2 Fichier de référence Nous allons apprendre dans un premier temps à calculer pour une commune un fichier de référence comportant le nombre dhabitants et le nombre de ménage de chacun des quartiers IRIS. Puis nous y ajouerons le contour géomérique des quartiers IRIS afin de pouvoir réaliser des cartes par la suite. 2.2.1 Nombre total dhabitants et de ménages de la commune Comme le recensement nest pas exhaustif, nous devrons pondérer tous nos calculs par la variable IPONDI qui est définie de la façon suivante dans les métadonnées : metavar&lt;-meta %&gt;% filter(COD_VAR == &quot;IPONDI&quot;) kable(metavar) COD_VAR LIB_VAR COD_MOD LIB_MOD TYPE_VAR LONG_VAR IPONDI Poids de lindividu CHAR 17.15 2.2.1.1 nombre dhabitants de la commune On commence par créer la variable COM qui nexiste pas mais qui est contenue dans le code IRIS, puis on regroupe par commune et enfin on effectue la somme. indiv %&gt;% mutate(COM = substr(IRIS,1,5)) %&gt;% filter(COM == &quot;94071&quot;) %&gt;% summarise(nbhab = sum(IPONDI)) # A tibble: 1 x 1 nbhab &lt;dbl&gt; 1 26479. On constate que la commune de Sucy-en-Brie (94071)* a une population estimée de 26479.068 habitants. 2.2.1.2 nombre de ménage de la commune Pour calculer le nombre de ménages, il faut construire un tablean menag ne comportant que les personnes de références. Nous allons devoir utiliser pour cela la variable LPRF dont on affiche les métadonnées : metavar&lt;-meta %&gt;% filter(COD_VAR == &quot;LPRF&quot;) kable(metavar) COD_VAR LIB_VAR COD_MOD LIB_MOD TYPE_VAR LONG_VAR LPRF Lien à la personne de référence de la famille 0 Hors famille CHAR 1 LPRF Lien à la personne de référence de la famille 1 Personne de référence de la famille CHAR 1 LPRF Lien à la personne de référence de la famille 2 Conjoint de la personne de référence de la famille CHAR 1 LPRF Lien à la personne de référence de la famille 3 Enfant de la famille CHAR 1 LPRF Lien à la personne de référence de la famille 4 Père ou mère de la personne de référence de la famille CHAR 1 LPRF Lien à la personne de référence de la famille 5 Frère ou soeur de la personne de référence de la famille CHAR 1 LPRF Lien à la personne de référence de la famille Z Hors logement ordinaire CHAR 1 Ce tableau montre que la modalité 1 correspond précisément aux personnes de références. Il faut donc filtrer le tableau des individus sur la condition LPRF==1pour ne garder que les ménages.On peut alors dénombrer les ménages en appliquant exactement la même procédure de pondération que pour la population : indiv %&gt;% filter(LPRF == 1) %&gt;% mutate(COM = substr(IRIS,1,5)) %&gt;% filter(COM == &quot;94071&quot;) %&gt;% summarise(nbmen = sum(IPONDI)) # A tibble: 1 x 1 nbmen &lt;dbl&gt; 1 7467. Daprès le tableau obtenu, il y a 7466.732 ménages (ordinaires) dans la commune de Sucy-en-Brie en 2017 2.2.1.3 Vérification On se rend sur le site de lINSEE pour vérifier que les deux chiffres correspondent bien approximativement aux résultats du recensement de 2017 2.2.2 Nombre dhabitants et de ménages par IRIS On se propose maintenant détablir un tableau du nombre dhabitant et du nombre de ménages dune commune par quartier IRIS. 2.2.2.1 Nombre dhabitants dune commune par IRIS On calcule le nombre dhabitants par IRIS à laide de linstruction group_by du package dplyr: tabpop &lt;- indiv %&gt;% mutate(COM = substr(IRIS,1,5)) %&gt;% filter(COM == &quot;94071&quot;) %&gt;% group_by (IRIS) %&gt;% summarise(nbhab = sum(IPONDI)) `summarise()` ungrouping output (override with `.groups` argument) kable(tabpop) IRIS nbhab 940710101 2150.932 940710102 2203.946 940710103 2843.362 940710104 2630.590 940710105 3006.213 940710106 2368.138 940710107 2545.304 940710108 2853.129 940710109 2527.575 940710110 1524.599 940710111 1825.280 2.2.2.2 Nombre de ménages dune commune par IRIS On calcule le nombre de ménages par IRIS tabmen &lt;- indiv %&gt;% filter(LPRF == 1) %&gt;% mutate(COM = substr(IRIS,1,5)) %&gt;% filter(COM == &quot;94071&quot;) %&gt;% group_by (IRIS) %&gt;% summarise(nbmen = sum(IPONDI)) `summarise()` ungrouping output (override with `.groups` argument) Puis on effectue la jointure des deux tableaux et on crée une nouvelle variable décrivant le nombre moyen de personnes par ménage tabdon &lt;- left_join(tabpop, tabmen) %&gt;% mutate(tailmen = nbhab/nbmen) Joining, by = &quot;IRIS&quot; kable(tabdon, digits = c(NA,0,0,2)) IRIS nbhab nbmen tailmen 940710101 2151 635 3.39 940710102 2204 584 3.78 940710103 2843 736 3.86 940710104 2631 808 3.25 940710105 3006 865 3.47 940710106 2368 679 3.49 940710107 2545 730 3.48 940710108 2853 825 3.46 940710109 2528 662 3.82 940710110 1525 404 3.77 940710111 1825 537 3.40 2.2.3 Ajout de la géométrie Notre tableau des IRIS ne comporte pas actuellement de données géométriques permettant la cartographie et on ny trouve pas non plus le nom ds IRIS. Nous allons donc extraire ces informations du fichier cartographique. Puis nous allons fusionner les deux fichiers pour faire un objet de type sf(spatial features) qui pourra être facilement utilisé par la suite pour réaliser des cartes. 2.2.3.1 Extraction des IRIS de la commune On charge le fichier des IRIS du départmeent et on extrait de celui-ci les contours IRIS de la commune qui nous intéresse. mymap &lt;- map %&gt;% filter(INSEE_COM == &quot;94071&quot;) %&gt;% select(CODE_IRIS, NOM_IRIS, TYP_IRIS,NOM_COM, geometry) head(mymap) # A tibble: 6 x 5 CODE_IRIS NOM_IRIS TYP_IRIS NOM_COM geometry &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;MULTIPOLYGON [m]&gt; 1 940710107 Notre Dame ~ H Sucy-en~ (((667480.7 6851728, 667498 6851748,~ 2 940710103 La Cite Ver~ H Sucy-en~ (((665121.5 6852886, 665122.9 685287~ 3 940710102 La Fosse Ro~ H Sucy-en~ (((665788.4 6853098, 665788.8 685309~ 4 940710111 Gare Varenn~ H Sucy-en~ (((664052.9 6852830, 664055.5 685282~ 5 940710109 Le Centre H Sucy-en~ (((664318.9 6852899, 664337.1 685290~ 6 940710101 Le Grand Val H Sucy-en~ (((664052.9 6852830, 664050.3 685283~ 2.2.3.2 Ajout des coordonnées des centres dIRIS On détermine les centres des quartiers IRIS à laide dun combinaison de fonctions SF et on les ajoute au fichier coo&lt;-as.data.frame(st_coordinates(st_centroid(mymap))) Warning in st_centroid.sf(mymap): st_centroid assumes attributes are constant over geometries of x mymap &lt;-cbind(mymap,coo) kable(mymap) CODE_IRIS NOM_IRIS TYP_IRIS NOM_COM X Y geometry 940710107 Notre Dame  Bruyeres H Sucy-en-Brie 667852.4 6851082 MULTIPOLYGON (((667480.7 68 940710103 La Cite Verte H Sucy-en-Brie 664869.7 6852686 MULTIPOLYGON (((665121.5 68 940710102 La Fosse Rouge H Sucy-en-Brie 665269.2 6853014 MULTIPOLYGON (((665788.4 68 940710111 Gare Varennes Zi H Sucy-en-Brie 663547.5 6852295 MULTIPOLYGON (((664052.9 68 940710109 Le Centre H Sucy-en-Brie 664634.0 6852430 MULTIPOLYGON (((664318.9 68 940710101 Le Grand Val H Sucy-en-Brie 664435.3 6853178 MULTIPOLYGON (((664052.9 68 940710108 Le Petiti Val  Clos de Ville H Sucy-en-Brie 664604.3 6851645 MULTIPOLYGON (((663926.1 68 940710105 La Procession  Fort H Sucy-en-Brie 665509.4 6852035 MULTIPOLYGON (((665765.1 68 940710110 Berges Noyers Pv H Sucy-en-Brie 664124.5 6853470 MULTIPOLYGON (((664052.9 68 940710106 Le Plateau-Parc H Sucy-en-Brie 666195.3 6851330 MULTIPOLYGON (((667480.7 68 940710104 Les Monrois  Fdv H Sucy-en-Brie 665758.2 6852471 MULTIPOLYGON (((666202.7 68 2.2.3.3 Visualisation de la carte On visualise la carte des iris à laide des fonctions geom_sf et geom_textdu package ggplot2 ggplot(mymap) + geom_sf(fill = &quot;lightyellow&quot;) + geom_text(aes(x=X, y=Y, label = substr(CODE_IRIS,6,9)), colour = &quot;red&quot;) + ggtitle(&quot;Découpage de la commune de Sucy-en-Brie en IRIS&quot;) 2.2.3.4 Jointure des deux fichiers On va maintenant effectuer la joindure avec le tableau de données, mais en faisant attention à recoder la variable IRIS du fichier de données en CODE_IRIS pour assurer la jointure. mapdon &lt;- tabdon %&gt;% rename(CODE_IRIS = IRIS) %&gt;% left_join(mymap) Joining, by = &quot;CODE_IRIS&quot; kable(mapdon) CODE_IRIS nbhab nbmen tailmen NOM_IRIS TYP_IRIS NOM_COM X Y geometry 940710101 2150.932 635.1494 3.386499 Le Grand Val H Sucy-en-Brie 664435.3 6853178 MULTIPOLYGON (((664052.9 68 940710102 2203.946 583.7101 3.775755 La Fosse Rouge H Sucy-en-Brie 665269.2 6853014 MULTIPOLYGON (((665788.4 68 940710103 2843.362 736.1261 3.862602 La Cite Verte H Sucy-en-Brie 664869.7 6852686 MULTIPOLYGON (((665121.5 68 940710104 2630.590 808.1689 3.255000 Les Monrois  Fdv H Sucy-en-Brie 665758.2 6852471 MULTIPOLYGON (((666202.7 68 940710105 3006.213 865.1383 3.474836 La Procession  Fort H Sucy-en-Brie 665509.4 6852035 MULTIPOLYGON (((665765.1 68 940710106 2368.138 678.9959 3.487706 Le Plateau-Parc H Sucy-en-Brie 666195.3 6851330 MULTIPOLYGON (((667480.7 68 940710107 2545.304 730.4514 3.484563 Notre Dame  Bruyeres H Sucy-en-Brie 667852.4 6851082 MULTIPOLYGON (((667480.7 68 940710108 2853.129 825.4553 3.456431 Le Petiti Val  Clos de Ville H Sucy-en-Brie 664604.3 6851645 MULTIPOLYGON (((663926.1 68 940710109 2527.575 661.8642 3.818872 Le Centre H Sucy-en-Brie 664634.0 6852430 MULTIPOLYGON (((664318.9 68 940710110 1524.599 404.4499 3.769562 Berges Noyers Pv H Sucy-en-Brie 664124.5 6853470 MULTIPOLYGON (((664052.9 68 940710111 1825.280 537.2226 3.397623 Gare Varennes Zi H Sucy-en-Brie 663547.5 6852295 MULTIPOLYGON (((664052.9 68 2.2.3.5 Sauvegarde du résultat On sauvegarde précieusement le fichier final qui servira de référence pour la suite des travaux. saveRDS(mapdon, &quot;data/mapdon_94071.Rdata&quot;) 2.2.4 Automatisation du travail Nous avons maintenant bien décomposé toutes les étapes permettant de créer le fichier de référence pour une commune précise. Il nous reste à automatiser le processus pour une commune quelconque. Nous allons pour cela créer une fonction qui permet de créer pour une commune quelconque son fichier de référence. 2.2.4.1 Ecriture de la fonction Il suffit de reprendre tous les programmes précédents en remplaçant le code 94370 par un argument codecom de la fonction quon va appeler mapdon() : mapdon &lt;- function(indiv = indiv, map = map, codecom = &quot;94370&quot;) { # (1) Création du tableau de population par IRIS tabpop &lt;- indiv %&gt;% mutate(COM = substr(IRIS,1,5)) %&gt;% filter(COM == codecom) %&gt;% group_by (IRIS) %&gt;% summarise(nbhab = sum(IPONDI)) # (2) Création du tableau de ménage par IRIS tabmen &lt;- indiv %&gt;% filter(LPRF == 1) %&gt;% mutate(COM = substr(IRIS,1,5)) %&gt;% filter(COM == codecom) %&gt;% group_by (IRIS) %&gt;% summarise(nbmen = sum(IPONDI)) # (3) Fusion des tableaux de données tabdon &lt;- left_join(tabpop, tabmen) %&gt;% mutate(tailmen = nbhab/nbmen) # (4) Extraction du fonds de carte des IRIS mymap &lt;- map %&gt;% filter(INSEE_COM == codecom) %&gt;% select(CODE_IRIS, NOM_IRIS, TYP_IRIS,NOM_COM, geometry) # (5) Ajout des coordonnées des centres d&#39;IRIS coo&lt;-as.data.frame(st_coordinates(st_centroid(mymap))) mymap &lt;-cbind(mymap,coo) # (6) Fusion des données et de la géométrie mapdon &lt;- tabdon %&gt;% rename(CODE_IRIS = IRIS) %&gt;% left_join(mymap) # (7) Conversion au format sf mapdon&lt;-st_as_sf(mapdon) # (7) Sortie du résultat return(mapdon) } 2.2.4.2 Test de la fonction Essayons maintenant dappliquer notre fonction à une autre commune comme Saint-Maur-des-Fossés (94068). Il suffit pour cela de lui fournir les trois paramètres correspondant au tableau de données individuelles, au fonds de carte et au code de la commune # indiv &lt;- readRDS(&quot;data/indiv2017.Rdata&quot;) # map &lt;-readRDS(&quot;data/map_iris.Rdata&quot;) stmaur &lt;- mapdon(indiv=indiv, map = map, codecom = &quot;94068&quot;) `summarise()` ungrouping output (override with `.groups` argument) `summarise()` ungrouping output (override with `.groups` argument) Joining, by = &quot;IRIS&quot; Warning in st_centroid.sf(mymap): st_centroid assumes attributes are constant over geometries of x Joining, by = &quot;CODE_IRIS&quot; class(stmaur) [1] &quot;sf&quot; &quot;tbl_df&quot; &quot;tbl&quot; &quot;data.frame&quot; kable(head(stmaur)) CODE_IRIS nbhab nbmen tailmen NOM_IRIS TYP_IRIS NOM_COM X Y geometry 940680101 2354.834 624.1949 3.772594 Adamville 1 H Saint-Maur-des-Fossés 662121.0 6856007 MULTIPOLYGON (((662332.4 68 940680102 2615.027 684.4929 3.820386 Adamville 2 H Saint-Maur-des-Fossés 661513.7 6855845 MULTIPOLYGON (((661318.1 68 940680103 2630.544 729.7559 3.604691 Adamville 3 H Saint-Maur-des-Fossés 662092.7 6855636 MULTIPOLYGON (((661797 6855 940680104 2395.176 613.8611 3.901821 Adamville 4 H Saint-Maur-des-Fossés 662802.3 6855656 MULTIPOLYGON (((662332.4 68 940680105 2213.094 617.8948 3.581669 Adamville 5 H Saint-Maur-des-Fossés 661794.9 6855206 MULTIPOLYGON (((661810.5 68 940680106 2561.655 717.1513 3.571987 Adamville 6 H Saint-Maur-des-Fossés 662302.9 6855263 MULTIPOLYGON (((662285.5 68 On peut visualiser la carte et ses codes : ggplot(stmaur) + geom_sf(fill = &quot;lightyellow&quot;) + geom_text(aes(x=X, y=Y, label = substr(CODE_IRIS,6,9)), colour = &quot;red&quot;) + ggtitle(&quot;Découpage de la commune en IRIS&quot;) Et sauvegarder le résultat sil est correct : saveRDS(stmaur, &quot;data/mapdon_94068.Rdata&quot;) "]]

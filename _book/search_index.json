[["22-leaflet_mapview.html", "4 Cartes interactives 4.1 Objectifs 4.2 Cartographie avec Mapview", " 4 Cartes interactives 4.1 Objectifs L’objectif de cette section est d’apprendre réaliser des cartographies interactives à l’aide du package leaflet et plus généralement d’apprendre à cartographier des données ponctuelles telles que les équipements, commerces, services, ventes de biens … 4.1.1 Packages utilisés Nous allons nous limiter à un nombre limité de packages dplyr et tidyr: pour la manipulation des tableaux et leur agrégation (inutile de charger l’ensemble du package tidyverse) knitr : pour afficher proprement les tableaux de résultats ggplot2 : pour visualiser les résultats sous formes de graphiques sf : pour manipuler les données cartographiques et les agréger mapview, leaflet , htmlwidgets, htmltools pour la réalisation de cartes interactives accessibles sur le web. library(knitr) library(tidyr) library(dplyr) library(ggplot2) library(sf) Linking to GEOS 3.8.1, GDAL 3.1.1, PROJ 6.3.1 library(data.table) Attaching package: &#39;data.table&#39; The following objects are masked from &#39;package:dplyr&#39;: between, first, last The following object is masked from &#39;package:purrr&#39;: transpose library(mapview) GDAL version &gt;= 3.1.0 | setting mapviewOptions(fgb = TRUE) library(leaflet.providers) #library(leaflet) #library(htmltools) #library(htmlwidgets) 4.1.2 Base permanente des équipements On répcupère les données de la Base Permanente des Equipements 2019 de l’INSEE sur le site web de cette organisation (https://www.insee.fr/fr/statistiques/3568638?sommaire=3568656) et on procède à l’extraction du département du Val de Marne. On stocke également le code des équipements. list.files(&quot;tmp/bpe19_ensemble_xy_csv&quot;) bpe&lt;-fread(&quot;tmp/bpe19_ensemble_xy_csv/bpe19_ensemble_xy.csv&quot; ) bpe&lt;-bpe[bpe$DEP==&quot;94&quot;,] # Sauvegarde fichier complet write.table(bpe,&quot;data/bpe2019_94.csv&quot;, row.names = F, sep = &quot;;&quot;, fileEncoding = &quot;UTF-8&quot;) # Extraction des coordonnées complètes bpe2&lt;-bpe[is.na(bpe$LAMBERT_X)==F,] # Recheche du code de Projection INSEE map_iris&lt;-readRDS(&quot;data/map_iris.Rdata&quot;) inseeproj&lt;-st_crs(map_iris) # Transformation des équipements au format sf x&lt;-st_as_sf(bpe2, coords = c(&quot;LAMBERT_X&quot;, &quot;LAMBERT_Y&quot;), crs = inseeproj, agr = &quot;constant&quot;) # Sauvegarde saveRDS(x,&quot;data/bpe2019_94_map.Rdata&quot;) # Code des équipements bpe_code&lt;-fread(&quot;tmp/bpe19_ensemble_xy_csv/varmod_bpe19_ensemble_xy.csv&quot;) bpe_code&lt;-bpe_code %&gt;% filter(COD_VAR==&quot;TYPEQU&quot;) %&gt;% select(COD_MOD, LIB_MOD) write.table(bpe_code,&quot;data/bpe2019_meta.csv&quot;, row.names = F, sep = &quot;;&quot;, fileEncoding = &quot;UTF-8&quot;) 4.1.3 Chargement des données bpe &lt;- read.table(&quot;data/bpe2019_94.csv&quot;, header = TRUE, sep = &quot;;&quot;, encoding = &quot;UTF-8&quot;) bpe_map &lt;- readRDS(&quot;data/bpe2019_94_map.Rdata&quot;) bpe_code &lt;- read.table(&quot;data/bpe2019_meta.csv&quot;, header = TRUE, sep = &quot;;&quot;, encoding = &quot;UTF-8&quot;) map_com&lt;-readRDS(&quot;data/map_com.Rdata&quot;) map_iris&lt;-readRDS(&quot;data/map_iris.Rdata&quot;) 4.2 Cartographie avec Mapview Le package mapview permet d’émuler de façon simple les commandes du package de référence leafletet d’obtenir facilement des cartographies interactives de très bonne qualité. Il ne remplace pas l’apprentissage du package leafletqui est une référence incontournable pour le spécialiste de dataminiing, mais il présente l’avantage de permettre d’obtenir rapidement des cartes de bonnes qualité. On trouvera une courte introduction en français ici et une documentation complète ici 4.2.1 Construction d’une carte de repérage Supposons que l’on veuille travailler sur les cinq communes de Bonneuil (94011), Chennevières (94019), Ormesson (94055), Saint-Maur (94068) et Sucy (94071). On commence par sélectionner les simples communes dans le fichier des communes et on réalise la carte avec la simple commande mapview(): 4.2.1.1 Carte des communes selcom&lt;-c(&quot;94011&quot;,&quot;94019&quot;,&quot;94055&quot;,&quot;94068&quot;,&quot;94071&quot;) cartecom&lt;-map_com %&gt;% filter(INSEE_COM %in% selcom) mapview(cartecom) Vous remarquez que la carte est interactive et permet à la fois d’ffectuer des zoom et de changer les tuiles de fonds. Lorsque l’on clique sur une commune, on récupère les données présentes dans le tableau. 4.2.1.2 Carte des iris On va maintenant tracer la carte des Iris en ajoutant quelques paramètres en plus : selcom&lt;-c(&quot;94011&quot;,&quot;94019&quot;,&quot;94055&quot;,&quot;94068&quot;,&quot;94071&quot;) cartecom &lt;- map_com %&gt;% filter(INSEE_COM %in% selcom) carteiris &lt;- map_iris %&gt;% filter(INSEE_COM %in% selcom) %&gt;% select(NOM_COM, CODE_IRIS, NOM_IRIS) map2&lt;-mapview(carteiris, # Selection des tuiles # map.types=c(&quot;CartoDB.Positron&quot;,&quot;OpenStreetMap&quot;), # Remplissage des IRIS zcol= &quot;NOM_COM&quot;, alpha.regions = 0.2, # Contour des IRIS lwd=0.6, color=&quot;gray50&quot;, alpha = 0.4, # Affichage de la Légende legend = FALSE ) map2 4.2.2 Cartes pontuelles Les équipements étant enregistrés dans un fichier de type ‘sf’ ils peuvent facilement être visualisés à l’aide de mapview en quelques clicks. 4.2.2.1 Carte d’un équipement isolé Prenons l’exemple des boulangeries dont le code est B103 dans la bpe et essayons de tracer celles de la zone d’étude sur le fonds des communes selcom&lt;-c(&quot;94011&quot;,&quot;94019&quot;,&quot;94055&quot;,&quot;94068&quot;,&quot;94071&quot;) cartecom&lt;-map_com %&gt;% filter(INSEE_COM %in% selcom) services &lt;- bpe_map %&gt;% filter(TYPEQU == &quot;B203&quot;, DEPCOM %in% selcom) %&gt;% select(TYPEQU) mapview(cartecom)+mapview(services) Essayons d’améliorer un peu l’ergonomie en raffinant les deux couches à l’aide de paramètres : # Couche des communes cart_com &lt;-mapview(cartecom, zcol= &quot;NOM_COM&quot;, alpha.regions = 0.2, # Contour des communes lwd=1, color=&quot;gray50&quot;, alpha = 0.6, # Affichage de la Légende legend = FALSE, layer.name = &quot;Communes&quot; ) # Couche des boulangeries cart_boul &lt;- mapview(services, color = &quot;red&quot;, col.regions = &quot;yellow&quot;, cex=2, legend = FALSE, layer.name = &quot;Boulangeries&quot;) # Assemblage des deux couches cart_com+cart_boul "]]
